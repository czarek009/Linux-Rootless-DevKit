# Usually we should specify the base image with a specific tag/version (like we do in Ubuntu images).
#     Other distros, like Ubuntu are hiding the security updates, so we will download the updates even if the tag is just 24.04.
# In case of RHEL, we need to use the latest tag, because they are tagging not only major releases (like 8, 9), but also minor releases (like 8.9, 8.10).
FROM registry.access.redhat.com/ubi8/ubi:latest AS tester

LABEL maintainer="Michal Kukowski <kukossw@gmail.com>"

# The CI on github actions is unstable (flaky).
# Sometimes, the package manager cannot connect to the repository.
# We need to retry the update and install commands a few times to avoid the failure.
RUN printf '[main]\nretries=10\n' >> /etc/dnf/dnf.conf

# ======================== MOCK RHEL from RHEL free version ========================

# We are using free version of RHEL, we need to disable the subscription manager to avoid the error about missing subscription.
# To get a packages from paid version of RHEL, we mirror them from the EPEL repository (dnf --enablerepo=epel).

USER root

RUN sed -i '/^\[main\]/a disable_plugin=subscription-manager' /etc/yum.conf && \
    sed -i '/^\[main\]/a disable_plugin=subscription-manager' /etc/dnf/dnf.conf && \
    sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/subscription-manager.conf && \
    sed -i 's/enabled=1/enabled=0/' /etc/dnf/plugins/subscription-manager.conf

RUN dnf update -y && \
    dnf install -y --nodocs --allowerasing \
        curl && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache

RUN curl -fsSL https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -o /tmp/epel-release.rpm && \
    rpm -Uvh /tmp/epel-release.rpm && \
    rm -f /tmp/epel-release.rpm

# ==================================================================================

# =============== Install common packages (fonts, bash, locales ...) ===============

# Packages are installed on most distributions, in case of real images (real HW, VM, VDI).
# Usually, user would not have to install them manually.
# This is a base image for testing, so we install them here.

USER root

RUN dnf update -y && \
    dnf install -y --nodocs --allowerasing \
        bash \
        coreutils \
        fontconfig \
        glibc-locale-source \
        glibc-langpack-en && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache

# ==================================================================================

# ================= Make fundamental configuration (language ...) ==================

# The confifuration usually is done by the user during the installation of the system or first login.
# Usually, user would not have to do it manually (admin does it for him).
# This is a base image for testing, so we do it here.

USER root

ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# ==================================================================================

# ================ Simulate user without root privileges (no sudo) =================

USER root

RUN groupadd -f -g 1111 tester-no-root && \
    useradd -m -u 1111 -g tester-no-root tester-no-root

RUN chgrp -R tester-no-root /tmp && \
    chmod -R g+rwx /tmp

RUN mkdir -p /home/tester-no-root/Downloads && \
    chown -R tester-no-root:tester-no-root /home/tester-no-root

# ==================================================================================

# =========================== Install required packages ============================

# To see which packages are required, see README.md in the project root directory.
# The main feature of this project is to require as few packages as possible.
# Usually, user would not have to install them manually.
# The biggers dependensies, are:
# - podman (container engine, alternative to docker, without root privileges and demon)
# - bash
# - GNU coreutils (basic commands like ls, cp, mv, rm, etc.)

USER root

RUN dnf update -y && \
    dnf install -y --nodocs \
        podman && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache

# podman requires some additional configuration to work without root privileges
# Usually, user would not have to do it manually (admin does it for him).
# Moreover, without podman properly configred and available on the machine, our project would not work.
# Our target user is the one who has no root privileges, but has podman installed and configured.
# To simulate such a user, we need to create a proper podman configuration here.

# Install slirp4netns and fuse-overlayfs, which are required for podman to work without root privileges
# slirp4netns is used for user-mode networking
# fuse-overlayfs is used for user-mode storage
# shadow-utils (uidmap) is used for user namespaces (user storage)
# containernetworking-plugins is used for CNI (Container Network Interface): bridge/portmap/firewall/tuning
RUN dnf update -y && \
    dnf install -y --nodocs \
        slirp4netns \
        fuse-overlayfs \
        shadow-utils \
        containernetworking-plugins && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache

# Grant the tester-no-root user a subordinate UID/GID range
RUN usermod --add-subuids 100000-165535 --add-subgids 100000-165535 tester-no-root

# Ensure XDG_RUNTIME_DIR exists and is owned by tester-no-root
ENV XDG_RUNTIME_DIR=/run/user/1111
RUN mkdir -p ${XDG_RUNTIME_DIR} && \
    chown tester-no-root:tester-no-root ${XDG_RUNTIME_DIR}

# Add set-uid for newuidmap and newgidmap binaries
RUN chmod 0755 /usr/bin/newuidmap /usr/bin/newgidmap && \
    setcap cap_setuid+ep /usr/bin/newuidmap && \
    setcap cap_setgid+ep /usr/bin/newgidmap && \
    chmod -s /usr/bin/newuidmap /usr/bin/newgidmap

# Update ca-certificates to ensure podman can access the internet and download images
RUN dnf update -y && \
    dnf install -y --nodocs \
        ca-certificates && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache && \
    update-ca-trust

# We need to remount the root filesystem as shared, so that podman can work properly
# This is a workaround for the issue with podman not being able to run containers without root
# privileges due to the root filesystem being mounted as private.
# The issue should not be a problem in real environments, but it is in the container.
# Remounting the root filesystem as shared should be done in the runtime, so the wrapper script is needed.

RUN echo '#!/usr/bin/env bash' > /usr/local/bin/podman_wrapper.sh && \
    echo 'sudo mount --make-rshared / 2>/dev/null || true' >> /usr/local/bin/podman_wrapper.sh && \
    echo 'exec "$@"' >> /usr/local/bin/podman_wrapper.sh && \
    chmod +x /usr/local/bin/podman_wrapper.sh

# We would like to test the project using the user wirthout root privileges,
# so we need to add only sudo access to /usr/bin/mount command

RUN dnf update -y && \
    dnf install -y --nodocs \
        sudo && \
    dnf clean all && \
    rm -rf /var/cache/dnf /tmp/* /root/.cache

RUN echo 'tester-no-root ALL=(root) NOPASSWD: /usr/bin/mount' > /etc/sudoers.d/99-tester-no-root-mount && \
    chmod 0440 /etc/sudoers.d/99-tester-no-root-mount

# ==================================================================================

# ========================= Download project (copy files) ==========================

COPY . /home/tester-no-root/Downloads
WORKDIR /home/tester-no-root/Downloads

# ==================================================================================

USER tester-no-root
ENTRYPOINT ["/usr/local/bin/podman_wrapper.sh"]
CMD ["podman", "run", "ubuntu:latest", "echo", "PASSED"]